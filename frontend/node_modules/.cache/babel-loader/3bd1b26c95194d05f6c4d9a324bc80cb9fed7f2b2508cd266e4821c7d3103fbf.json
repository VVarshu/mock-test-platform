{"ast":null,"code":"import axios from 'axios';\n\n// Set base API URL\nconst API_URL = 'http://localhost:5000/api'; // Make sure this matches your server URL\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, userData); // Adjusted URL\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error('Registration error:', error.response ? error.response.data : error.message); // Log error details\n    throw error; // Re-throw the error to handle it in the component\n  }\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials); // Adjusted URL\n    return response.data; // Return the JWT token or user data\n  } catch (error) {\n    console.error('Login error:', error.response ? error.response.data : error.message); // Log error details\n    throw error; // Re-throw the error for handling in the frontend\n  }\n};\n\n// Get random questions for the test\nexport const getQuestions = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/questions/random`); // Correct endpoint\n    console.log('Fetched questions:', response.data); // Log fetched questions for debugging\n    return response.data; // Return questions data\n  } catch (error) {\n    console.error('Error fetching questions:', error.message); // Log error message\n    throw error; // Re-throw the error for further handling\n  }\n};\nexport const submitTest = async data => {\n  try {\n    const response = await axios.post(`${API_URL}/test/submit`, data); // Correct endpoint\n    return response.data; // Return the success response\n  } catch (error) {\n    // Improved error logging for better debugging\n    if (error.response) {\n      // Server responded with a status other than 200 range\n      console.error('Error submitting test:', error.response.data);\n      console.error('Status code:', error.response.status);\n    } else if (error.request) {\n      // Request was made but no response was received\n      console.error('Error submitting test: No response received:', error.request);\n    } else {\n      // Something happened in setting up the request\n      console.error('Error submitting test:', error.message);\n    }\n    throw error; // Re-throw the error for frontend handling\n  }\n};","map":{"version":3,"names":["axios","API_URL","registerUser","userData","response","post","data","error","console","message","loginUser","credentials","getQuestions","get","log","submitTest","status","request"],"sources":["C:/Users/HP/OneDrive/Desktop/mock-test/mock-test-platform/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base API URL\r\nconst API_URL = 'http://localhost:5000/api'; // Make sure this matches your server URL\r\n\r\n// Register a new user\r\nexport const registerUser = async (userData) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/auth/register`, userData); // Adjusted URL\r\n        return response.data; // Return the response data\r\n    } catch (error) {\r\n        console.error('Registration error:', error.response ? error.response.data : error.message); // Log error details\r\n        throw error; // Re-throw the error to handle it in the component\r\n    }\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/auth/login`, credentials); // Adjusted URL\r\n        return response.data; // Return the JWT token or user data\r\n    } catch (error) {\r\n        console.error('Login error:', error.response ? error.response.data : error.message); // Log error details\r\n        throw error; // Re-throw the error for handling in the frontend\r\n    }\r\n};\r\n\r\n// Get random questions for the test\r\nexport const getQuestions = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_URL}/questions/random`); // Correct endpoint\r\n        console.log('Fetched questions:', response.data); // Log fetched questions for debugging\r\n        return response.data; // Return questions data\r\n    } catch (error) {\r\n        console.error('Error fetching questions:', error.message); // Log error message\r\n        throw error; // Re-throw the error for further handling\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const submitTest = async (data) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}/test/submit`, data); // Correct endpoint\r\n        return response.data; // Return the success response\r\n    } catch (error) {\r\n        // Improved error logging for better debugging\r\n        if (error.response) {\r\n            // Server responded with a status other than 200 range\r\n            console.error('Error submitting test:', error.response.data);\r\n            console.error('Status code:', error.response.status);\r\n        } else if (error.request) {\r\n            // Request was made but no response was received\r\n            console.error('Error submitting test: No response received:', error.request);\r\n        } else {\r\n            // Something happened in setting up the request\r\n            console.error('Error submitting test:', error.message);\r\n        }\r\n        throw error; // Re-throw the error for frontend handling\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,gBAAgB,EAAEE,QAAQ,CAAC,CAAC,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IAC5F,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC5C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,aAAa,EAAEU,WAAW,CAAC,CAAC,CAAC;IACzE,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACH,QAAQ,GAAGG,KAAK,CAACH,QAAQ,CAACE,IAAI,GAAGC,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IACrF,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMJ,KAAK,CAACa,GAAG,CAAC,GAAGZ,OAAO,mBAAmB,CAAC,CAAC,CAAC;IACjEO,OAAO,CAACM,GAAG,CAAC,oBAAoB,EAAEV,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAClD,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;IAC3D,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAID,OAAO,MAAMQ,UAAU,GAAG,MAAOT,IAAI,IAAK;EACtC,IAAI;IACA,MAAMF,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,cAAc,EAAEK,IAAI,CAAC,CAAC,CAAC;IACnE,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAChB;MACAI,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;MAC5DE,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACH,QAAQ,CAACY,MAAM,CAAC;IACxD,CAAC,MAAM,IAAIT,KAAK,CAACU,OAAO,EAAE;MACtB;MACAT,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAACU,OAAO,CAAC;IAChF,CAAC,MAAM;MACH;MACAT,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D;IACA,MAAMF,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}