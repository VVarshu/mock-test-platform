{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\mock-test\\\\mock-test-platform\\\\frontend\\\\src\\\\components\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext, useCallback } from 'react';\nimport { getQuestions, submitTest } from '../api'; // Import submitTest from api\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test = () => {\n  _s();\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [timer, setTimer] = useState(900);\n  const [score, setScore] = useState(null);\n  const [testEnded, setTestEnded] = useState(false); // Flag to track if the test ended\n  const navigate = useNavigate();\n\n  // Handle submit score\n  const handleSubmitScore = useCallback(async () => {\n    console.log('User answers:', userAnswers); // Log user answers for debugging\n\n    // Calculate the total score based on correct answers\n    const correctAnswers = questions.filter(question => parseInt(userAnswers[question.id], 10) === question.correct_option).length;\n    const calculatedScore = correctAnswers; // Total number of correct answers\n    console.log('Calculated score:', calculatedScore); // Log the score for debugging\n\n    const userId = parseInt(currentUser.id, 10);\n    try {\n      const result = await submitTest({\n        userId,\n        score: calculatedScore,\n        userAnswers,\n        questions\n      });\n      console.log(result); // Log the result for debugging\n\n      setScore(calculatedScore); // Set the score in the state\n      sessionStorage.removeItem('testStarted'); // Remove the test started flag\n      setTestEnded(true); // Mark the test as ended\n\n      // Navigate to the score page and pass the score, answers, and questions\n      navigate('/score', {\n        state: {\n          score: calculatedScore,\n          userId,\n          userAnswers,\n          questions\n        }\n      });\n    } catch (error) {\n      console.error('Error submitting score:', error);\n    }\n  }, [questions, userAnswers, currentUser, navigate]);\n\n  // Fetch questions from the backend\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await getQuestions();\n        if (response && response.questions && response.questions.length > 0) {\n          setQuestions(response.questions);\n        } else {\n          setError('No questions available');\n        }\n      } catch (err) {\n        console.error('Failed to fetch questions:', err);\n        setError('Failed to fetch questions');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Timer countdown\n  useEffect(() => {\n    const countdown = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer <= 1) {\n          clearInterval(countdown);\n          handleSubmitScore(); // Submit score when time runs out\n          return 0; // Reset timer to 0\n        }\n        return prevTimer - 1; // Decrement the timer\n      });\n    }, 1000);\n    return () => clearInterval(countdown);\n  }, [handleSubmitScore]);\n\n  // Check if the test has already started or ended\n  useEffect(() => {\n    if (sessionStorage.getItem('testStarted')) {\n      console.log('Test already started, ending test...');\n      setTestEnded(true); // Mark test as ended if refresh detected\n      handleSubmitScore(); // Automatically submit score if refresh is detected\n    } else {\n      console.log('Starting test for the first time...');\n      sessionStorage.setItem('testStarted', 'true'); // Set flag to indicate test started\n    }\n    return () => {\n      sessionStorage.removeItem('testStarted'); // Clean up when component unmounts or test ends\n    };\n  }, [handleSubmitScore]);\n\n  // Handle answer selection and update userAnswers state\n  const handleAnswerChange = (questionId, answer) => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [questionId]: parseInt(answer, 10) // Store the selected answer as a number\n    }));\n  };\n\n  // Retake test function\n  const handleRetakeTest = () => {\n    setUserAnswers({});\n    setScore(null);\n    setTimer(900);\n    setTestEnded(false);\n    sessionStorage.setItem('testStarted', 'true'); // Reset test flag\n    setLoading(true);\n\n    // Re-fetch the questions\n    const fetchQuestions = async () => {\n      try {\n        const response = await getQuestions();\n        if (response && response.questions && response.questions.length > 0) {\n          setQuestions(response.questions);\n        } else {\n          setError('No questions available');\n        }\n      } catch (err) {\n        console.error('Failed to fetch questions:', err);\n        setError('Failed to fetch questions');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  };\n\n  // If loading, show a loading message\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If error occurred, show the error message\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If test ended, show the retake button and score\n  if (testEnded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your test has ended.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), score !== null && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Your Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetakeTest,\n        children: \"Retake Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Display the test with questions and answer options\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Time Left: \", Math.floor(timer / 60), \":\", String(timer % 60).padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question${index}`,\n            value: \"1\",\n            onChange: () => handleAnswerChange(question.id, '1')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), \" \", question.option1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question${index}`,\n            value: \"2\",\n            onChange: () => handleAnswerChange(question.id, '2')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), \" \", question.option2, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question${index}`,\n            value: \"3\",\n            onChange: () => handleAnswerChange(question.id, '3')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), \" \", question.option3, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 46\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question${index}`,\n            value: \"4\",\n            onChange: () => handleAnswerChange(question.id, '4')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), \" \", question.option4, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitScore,\n        children: \"Submit Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this)]\n    }, questions.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n_s(Test, \"c9OxPMpFOPV2WlTzOBwjvxKmtx4=\", false, function () {\n  return [useNavigate];\n});\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useCallback","getQuestions","submitTest","useNavigate","UserContext","jsxDEV","_jsxDEV","Test","_s","currentUser","questions","setQuestions","userAnswers","setUserAnswers","error","setError","loading","setLoading","timer","setTimer","score","setScore","testEnded","setTestEnded","navigate","handleSubmitScore","console","log","correctAnswers","filter","question","parseInt","id","correct_option","length","calculatedScore","userId","result","sessionStorage","removeItem","state","fetchQuestions","response","err","countdown","setInterval","prevTimer","clearInterval","getItem","setItem","handleAnswerChange","questionId","answer","prevAnswers","handleRetakeTest","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","Math","floor","String","padStart","map","index","text","type","name","value","onChange","option1","option2","option3","option4","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/mock-test/mock-test-platform/frontend/src/components/Test.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useCallback } from 'react';\r\nimport { getQuestions, submitTest } from '../api'; // Import submitTest from api\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { UserContext } from '../context/UserContext';\r\n\r\nconst Test = () => {\r\n    const { currentUser } = useContext(UserContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(900);\r\n    const [score, setScore] = useState(null);\r\n    const [testEnded, setTestEnded] = useState(false);  // Flag to track if the test ended\r\n    const navigate = useNavigate();\r\n\r\n    // Handle submit score\r\n    const handleSubmitScore = useCallback(async () => {\r\n        console.log('User answers:', userAnswers);  // Log user answers for debugging\r\n        \r\n        // Calculate the total score based on correct answers\r\n        const correctAnswers = questions.filter((question) => \r\n            parseInt(userAnswers[question.id], 10) === question.correct_option\r\n        ).length;\r\n\r\n        const calculatedScore = correctAnswers;  // Total number of correct answers\r\n        console.log('Calculated score:', calculatedScore);  // Log the score for debugging\r\n\r\n        const userId = parseInt(currentUser.id, 10);\r\n\r\n        try {\r\n            const result = await submitTest({\r\n                userId, \r\n                score: calculatedScore, \r\n                userAnswers, \r\n                questions \r\n            });\r\n            console.log(result);  // Log the result for debugging\r\n\r\n            setScore(calculatedScore); // Set the score in the state\r\n            sessionStorage.removeItem('testStarted'); // Remove the test started flag\r\n            setTestEnded(true);  // Mark the test as ended\r\n\r\n            // Navigate to the score page and pass the score, answers, and questions\r\n            navigate('/score', { state: { score: calculatedScore, userId, userAnswers, questions } });\r\n        } catch (error) {\r\n            console.error('Error submitting score:', error);\r\n        }\r\n    }, [questions, userAnswers, currentUser, navigate]);\r\n\r\n    // Fetch questions from the backend\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const response = await getQuestions();\r\n                if (response && response.questions && response.questions.length > 0) {\r\n                    setQuestions(response.questions);\r\n                } else {\r\n                    setError('No questions available');\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to fetch questions:', err);\r\n                setError('Failed to fetch questions');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // Timer countdown\r\n    useEffect(() => {\r\n        const countdown = setInterval(() => {\r\n            setTimer((prevTimer) => {\r\n                if (prevTimer <= 1) {\r\n                    clearInterval(countdown);\r\n                    handleSubmitScore(); // Submit score when time runs out\r\n                    return 0; // Reset timer to 0\r\n                }\r\n                return prevTimer - 1; // Decrement the timer\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(countdown);\r\n    }, [handleSubmitScore]);\r\n\r\n    // Check if the test has already started or ended\r\n    useEffect(() => {\r\n        if (sessionStorage.getItem('testStarted')) {\r\n            console.log('Test already started, ending test...');\r\n            setTestEnded(true);  // Mark test as ended if refresh detected\r\n            handleSubmitScore();  // Automatically submit score if refresh is detected\r\n        } else {\r\n            console.log('Starting test for the first time...');\r\n            sessionStorage.setItem('testStarted', 'true');  // Set flag to indicate test started\r\n        }\r\n\r\n        return () => {\r\n            sessionStorage.removeItem('testStarted'); // Clean up when component unmounts or test ends\r\n        };\r\n    }, [handleSubmitScore]);\r\n\r\n    // Handle answer selection and update userAnswers state\r\n    const handleAnswerChange = (questionId, answer) => {\r\n        setUserAnswers((prevAnswers) => ({\r\n            ...prevAnswers,\r\n            [questionId]: parseInt(answer, 10), // Store the selected answer as a number\r\n        }));\r\n    };\r\n\r\n    // Retake test function\r\n    const handleRetakeTest = () => {\r\n        setUserAnswers({});\r\n        setScore(null);\r\n        setTimer(900);\r\n        setTestEnded(false);\r\n        sessionStorage.setItem('testStarted', 'true');  // Reset test flag\r\n        setLoading(true);\r\n\r\n        // Re-fetch the questions\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const response = await getQuestions();\r\n                if (response && response.questions && response.questions.length > 0) {\r\n                    setQuestions(response.questions);\r\n                } else {\r\n                    setError('No questions available');\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to fetch questions:', err);\r\n                setError('Failed to fetch questions');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n    };\r\n\r\n    // If loading, show a loading message\r\n    if (loading) {\r\n        return <div>Loading questions...</div>;\r\n    }\r\n\r\n    // If error occurred, show the error message\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    // If test ended, show the retake button and score\r\n    if (testEnded) {\r\n        return (\r\n            <div>\r\n                <h3>Your test has ended.</h3>\r\n                {score !== null && <h3>Your Score: {score}</h3>}\r\n                <button onClick={handleRetakeTest}>Retake Test</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Display the test with questions and answer options\r\n    return (\r\n        <div className=\"test-container\">\r\n            <h2>Time Left: {Math.floor(timer / 60)}:{String(timer % 60).padStart(2, '0')}</h2>\r\n            <div className=\"question-container\" key={questions.id}>\r\n            {questions.map((question, index) => (\r\n                <div key={question.id}>\r\n                    <h4>{question.text}</h4>\r\n                    <div>\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"1\" \r\n                            onChange={() => handleAnswerChange(question.id, '1')} \r\n                        /> {question.option1}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"2\" \r\n                            onChange={() => handleAnswerChange(question.id, '2')} \r\n                        /> {question.option2}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"3\" \r\n                            onChange={() => handleAnswerChange(question.id, '3')} \r\n                        /> {question.option3}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"4\" \r\n                            onChange={() => handleAnswerChange(question.id, '4')} \r\n                        /> {question.option4}<br />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <button onClick={handleSubmitScore}>Submit Test</button>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Test;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}