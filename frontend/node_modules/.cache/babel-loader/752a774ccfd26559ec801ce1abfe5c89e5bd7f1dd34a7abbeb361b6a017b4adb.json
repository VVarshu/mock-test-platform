{"ast":null,"code":"import React,{useEffect,useState,useContext,useCallback}from'react';import{getQuestions,submitTest}from'../api';// Import submitTest from api\nimport{useNavigate}from'react-router-dom';import{UserContext}from'../context/UserContext';import'./test.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Test=()=>{const{currentUser}=useContext(UserContext);const[questions,setQuestions]=useState([]);const[userAnswers,setUserAnswers]=useState({});const[error,setError]=useState('');const[loading,setLoading]=useState(true);const[timer,setTimer]=useState(900);const[score,setScore]=useState(null);const[testEnded,setTestEnded]=useState(false);// Flag to track if the test ended\nconst navigate=useNavigate();// Handle submit score\nconst handleSubmitScore=useCallback(async()=>{console.log('User answers:',userAnswers);// Log user answers for debugging\n// Calculate the total score based on correct answers\nconst correctAnswers=questions.filter(question=>parseInt(userAnswers[question.id],10)===question.correct_option).length;const calculatedScore=correctAnswers;// Total number of correct answers\nconsole.log('Calculated score:',calculatedScore);// Log the score for debugging\nconst userId=parseInt(currentUser.id,10);try{const result=await submitTest({userId,score:calculatedScore,userAnswers,questions});console.log(result);// Log the result for debugging\nsetScore(calculatedScore);// Set the score in the state\nsessionStorage.removeItem('testStarted');// Remove the test started flag\nsetTestEnded(true);// Mark the test as ended\n// Navigate to the score page and pass the score, answers, and questions\nnavigate('/score',{state:{score:calculatedScore,userId,userAnswers,questions}});}catch(error){console.error('Error submitting score:',error);}},[questions,userAnswers,currentUser,navigate]);// Fetch questions from the backend\nuseEffect(()=>{const fetchQuestions=async()=>{try{const response=await getQuestions();if(response&&response.questions&&response.questions.length>0){setQuestions(response.questions);}else{setError('No questions available');}}catch(err){console.error('Failed to fetch questions:',err);setError('Failed to fetch questions');}finally{setLoading(false);}};fetchQuestions();},[]);// Timer countdown\nuseEffect(()=>{const countdown=setInterval(()=>{setTimer(prevTimer=>{if(prevTimer<=1){clearInterval(countdown);handleSubmitScore();// Submit score when time runs out\nreturn 0;// Reset timer to 0\n}return prevTimer-1;// Decrement the timer\n});},1000);return()=>clearInterval(countdown);},[handleSubmitScore]);// Check if the test has already started or ended\nuseEffect(()=>{if(sessionStorage.getItem('testStarted')){console.log('Test already started, ending test...');setTestEnded(true);// Mark test as ended if refresh detected\nhandleSubmitScore();// Automatically submit score if refresh is detected\n}else{console.log('Starting test for the first time...');sessionStorage.setItem('testStarted','true');// Set flag to indicate test started\n}return()=>{sessionStorage.removeItem('testStarted');// Clean up when component unmounts or test ends\n};},[handleSubmitScore]);// Handle answer selection and update userAnswers state\nconst handleAnswerChange=(questionId,answer)=>{setUserAnswers(prevAnswers=>({...prevAnswers,[questionId]:parseInt(answer,10)// Store the selected answer as a number\n}));};// Retake test function\nconst handleRetakeTest=()=>{setUserAnswers({});setScore(null);setTimer(900);setTestEnded(false);sessionStorage.setItem('testStarted','true');// Reset test flag\nsetLoading(true);// Re-fetch the questions\nconst fetchQuestions=async()=>{try{const response=await getQuestions();if(response&&response.questions&&response.questions.length>0){setQuestions(response.questions);}else{setError('No questions available');}}catch(err){console.error('Failed to fetch questions:',err);setError('Failed to fetch questions');}finally{setLoading(false);}};fetchQuestions();};// If loading, show a loading message\nif(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading questions...\"});}// If error occurred, show the error message\nif(error){return/*#__PURE__*/_jsx(\"div\",{children:error});}// If test ended, show the retake button and score\nif(testEnded){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Your test has ended.\"}),score!==null&&/*#__PURE__*/_jsxs(\"h3\",{children:[\"Your Score: \",score]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleRetakeTest,children:\"Retake Test\"})]});}// Display the test with questions and answer options\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"test-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"test-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Time Left: \",Math.floor(timer/60),\":\",String(timer%60).padStart(2,'0')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-container\",children:[questions.map((question,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:question.text}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:`question${index}`,value:\"1\",onChange:()=>handleAnswerChange(question.id,'1')}),\" \",question.option1,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:`question${index}`,value:\"2\",onChange:()=>handleAnswerChange(question.id,'2')}),\" \",question.option2,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:`question${index}`,value:\"3\",onChange:()=>handleAnswerChange(question.id,'3')}),\" \",question.option3,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:`question${index}`,value:\"4\",onChange:()=>handleAnswerChange(question.id,'4')}),\" \",question.option4,/*#__PURE__*/_jsx(\"br\",{})]})]},question.id)),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmitScore,children:\"Submit Test\"})]})]})});};export default Test;","map":{"version":3,"names":["React","useEffect","useState","useContext","useCallback","getQuestions","submitTest","useNavigate","UserContext","jsx","_jsx","jsxs","_jsxs","Test","currentUser","questions","setQuestions","userAnswers","setUserAnswers","error","setError","loading","setLoading","timer","setTimer","score","setScore","testEnded","setTestEnded","navigate","handleSubmitScore","console","log","correctAnswers","filter","question","parseInt","id","correct_option","length","calculatedScore","userId","result","sessionStorage","removeItem","state","fetchQuestions","response","err","countdown","setInterval","prevTimer","clearInterval","getItem","setItem","handleAnswerChange","questionId","answer","prevAnswers","handleRetakeTest","children","onClick","className","Math","floor","String","padStart","map","index","text","type","name","value","onChange","option1","option2","option3","option4"],"sources":["C:/Users/HP/OneDrive/Desktop/mock-test/mock-test-platform/frontend/src/components/Test.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useCallback } from 'react';\r\nimport { getQuestions, submitTest } from '../api'; // Import submitTest from api\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { UserContext } from '../context/UserContext';\r\nimport './test.css';\r\n\r\nconst Test = () => {\r\n    const { currentUser } = useContext(UserContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [timer, setTimer] = useState(900);\r\n    const [score, setScore] = useState(null);\r\n    const [testEnded, setTestEnded] = useState(false);  // Flag to track if the test ended\r\n    const navigate = useNavigate();\r\n\r\n    // Handle submit score\r\n    const handleSubmitScore = useCallback(async () => {\r\n        console.log('User answers:', userAnswers);  // Log user answers for debugging\r\n        \r\n        // Calculate the total score based on correct answers\r\n        const correctAnswers = questions.filter((question) => \r\n            parseInt(userAnswers[question.id], 10) === question.correct_option\r\n        ).length;\r\n\r\n        const calculatedScore = correctAnswers;  // Total number of correct answers\r\n        console.log('Calculated score:', calculatedScore);  // Log the score for debugging\r\n\r\n        const userId = parseInt(currentUser.id, 10);\r\n\r\n        try {\r\n            const result = await submitTest({\r\n                userId, \r\n                score: calculatedScore, \r\n                userAnswers, \r\n                questions \r\n            });\r\n            console.log(result);  // Log the result for debugging\r\n\r\n            setScore(calculatedScore); // Set the score in the state\r\n            sessionStorage.removeItem('testStarted'); // Remove the test started flag\r\n            setTestEnded(true);  // Mark the test as ended\r\n\r\n            // Navigate to the score page and pass the score, answers, and questions\r\n            navigate('/score', { state: { score: calculatedScore, userId, userAnswers, questions } });\r\n        } catch (error) {\r\n            console.error('Error submitting score:', error);\r\n        }\r\n    }, [questions, userAnswers, currentUser, navigate]);\r\n\r\n    // Fetch questions from the backend\r\n    useEffect(() => {\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const response = await getQuestions();\r\n                if (response && response.questions && response.questions.length > 0) {\r\n                    setQuestions(response.questions);\r\n                } else {\r\n                    setError('No questions available');\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to fetch questions:', err);\r\n                setError('Failed to fetch questions');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n    }, []);\r\n\r\n    // Timer countdown\r\n    useEffect(() => {\r\n        const countdown = setInterval(() => {\r\n            setTimer((prevTimer) => {\r\n                if (prevTimer <= 1) {\r\n                    clearInterval(countdown);\r\n                    handleSubmitScore(); // Submit score when time runs out\r\n                    return 0; // Reset timer to 0\r\n                }\r\n                return prevTimer - 1; // Decrement the timer\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(countdown);\r\n    }, [handleSubmitScore]);\r\n\r\n    // Check if the test has already started or ended\r\n    useEffect(() => {\r\n        if (sessionStorage.getItem('testStarted')) {\r\n            console.log('Test already started, ending test...');\r\n            setTestEnded(true);  // Mark test as ended if refresh detected\r\n            handleSubmitScore();  // Automatically submit score if refresh is detected\r\n        } else {\r\n            console.log('Starting test for the first time...');\r\n            sessionStorage.setItem('testStarted', 'true');  // Set flag to indicate test started\r\n        }\r\n\r\n        return () => {\r\n            sessionStorage.removeItem('testStarted'); // Clean up when component unmounts or test ends\r\n        };\r\n    }, [handleSubmitScore]);\r\n\r\n    // Handle answer selection and update userAnswers state\r\n    const handleAnswerChange = (questionId, answer) => {\r\n        setUserAnswers((prevAnswers) => ({\r\n            ...prevAnswers,\r\n            [questionId]: parseInt(answer, 10), // Store the selected answer as a number\r\n        }));\r\n    };\r\n\r\n    // Retake test function\r\n    const handleRetakeTest = () => {\r\n        setUserAnswers({});\r\n        setScore(null);\r\n        setTimer(900);\r\n        setTestEnded(false);\r\n        sessionStorage.setItem('testStarted', 'true');  // Reset test flag\r\n        setLoading(true);\r\n\r\n        // Re-fetch the questions\r\n        const fetchQuestions = async () => {\r\n            try {\r\n                const response = await getQuestions();\r\n                if (response && response.questions && response.questions.length > 0) {\r\n                    setQuestions(response.questions);\r\n                } else {\r\n                    setError('No questions available');\r\n                }\r\n            } catch (err) {\r\n                console.error('Failed to fetch questions:', err);\r\n                setError('Failed to fetch questions');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchQuestions();\r\n    };\r\n\r\n    // If loading, show a loading message\r\n    if (loading) {\r\n        return <div>Loading questions...</div>;\r\n    }\r\n\r\n    // If error occurred, show the error message\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    // If test ended, show the retake button and score\r\n    if (testEnded) {\r\n        return (\r\n            <div>\r\n                <h3>Your test has ended.</h3>\r\n                {score !== null && <h3>Your Score: {score}</h3>}\r\n                <button onClick={handleRetakeTest}>Retake Test</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Display the test with questions and answer options\r\n    return (\r\n    <div className=\"test-page\">\r\n        <div className=\"test-container\">\r\n            <h2>Time Left: {Math.floor(timer / 60)}:{String(timer % 60).padStart(2, '0')}</h2>\r\n            <div className=\"question-container\">\r\n            {questions.map((question, index) => (\r\n                <div key={question.id}>\r\n                    <h4>{question.text}</h4>\r\n                    <div>\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"1\" \r\n                            onChange={() => handleAnswerChange(question.id, '1')} \r\n                        /> {question.option1}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"2\" \r\n                            onChange={() => handleAnswerChange(question.id, '2')} \r\n                        /> {question.option2}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"3\" \r\n                            onChange={() => handleAnswerChange(question.id, '3')} \r\n                        /> {question.option3}<br />\r\n                        <input \r\n                            type=\"radio\" \r\n                            name={`question${index}`} \r\n                            value=\"4\" \r\n                            onChange={() => handleAnswerChange(question.id, '4')} \r\n                        /> {question.option4}<br />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <button onClick={handleSubmitScore}>Submit Test</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n    );\r\n};\r\n\r\nexport default Test;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,WAAW,KAAQ,OAAO,CAC3E,OAASC,YAAY,CAAEC,UAAU,KAAQ,QAAQ,CAAE;AACnD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,WAAW,KAAQ,wBAAwB,CACpD,MAAO,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEpB,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACf,KAAM,CAAEC,WAAY,CAAC,CAAGX,UAAU,CAACK,WAAW,CAAC,CAC/C,KAAM,CAACO,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACe,WAAW,CAAEC,cAAc,CAAC,CAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAClD,KAAM,CAACiB,KAAK,CAAEC,QAAQ,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACmB,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACqB,KAAK,CAAEC,QAAQ,CAAC,CAAGtB,QAAQ,CAAC,GAAG,CAAC,CACvC,KAAM,CAACuB,KAAK,CAAEC,QAAQ,CAAC,CAAGxB,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACyB,SAAS,CAAEC,YAAY,CAAC,CAAG1B,QAAQ,CAAC,KAAK,CAAC,CAAG;AACpD,KAAM,CAAA2B,QAAQ,CAAGtB,WAAW,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAuB,iBAAiB,CAAG1B,WAAW,CAAC,SAAY,CAC9C2B,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEf,WAAW,CAAC,CAAG;AAE5C;AACA,KAAM,CAAAgB,cAAc,CAAGlB,SAAS,CAACmB,MAAM,CAAEC,QAAQ,EAC7CC,QAAQ,CAACnB,WAAW,CAACkB,QAAQ,CAACE,EAAE,CAAC,CAAE,EAAE,CAAC,GAAKF,QAAQ,CAACG,cACxD,CAAC,CAACC,MAAM,CAER,KAAM,CAAAC,eAAe,CAAGP,cAAc,CAAG;AACzCF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEQ,eAAe,CAAC,CAAG;AAEpD,KAAM,CAAAC,MAAM,CAAGL,QAAQ,CAACtB,WAAW,CAACuB,EAAE,CAAE,EAAE,CAAC,CAE3C,GAAI,CACA,KAAM,CAAAK,MAAM,CAAG,KAAM,CAAApC,UAAU,CAAC,CAC5BmC,MAAM,CACNhB,KAAK,CAAEe,eAAe,CACtBvB,WAAW,CACXF,SACJ,CAAC,CAAC,CACFgB,OAAO,CAACC,GAAG,CAACU,MAAM,CAAC,CAAG;AAEtBhB,QAAQ,CAACc,eAAe,CAAC,CAAE;AAC3BG,cAAc,CAACC,UAAU,CAAC,aAAa,CAAC,CAAE;AAC1ChB,YAAY,CAAC,IAAI,CAAC,CAAG;AAErB;AACAC,QAAQ,CAAC,QAAQ,CAAE,CAAEgB,KAAK,CAAE,CAAEpB,KAAK,CAAEe,eAAe,CAAEC,MAAM,CAAExB,WAAW,CAAEF,SAAU,CAAE,CAAC,CAAC,CAC7F,CAAE,MAAOI,KAAK,CAAE,CACZY,OAAO,CAACZ,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACnD,CACJ,CAAC,CAAE,CAACJ,SAAS,CAAEE,WAAW,CAAEH,WAAW,CAAEe,QAAQ,CAAC,CAAC,CAEnD;AACA5B,SAAS,CAAC,IAAM,CACZ,KAAM,CAAA6C,cAAc,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA1C,YAAY,CAAC,CAAC,CACrC,GAAI0C,QAAQ,EAAIA,QAAQ,CAAChC,SAAS,EAAIgC,QAAQ,CAAChC,SAAS,CAACwB,MAAM,CAAG,CAAC,CAAE,CACjEvB,YAAY,CAAC+B,QAAQ,CAAChC,SAAS,CAAC,CACpC,CAAC,IAAM,CACHK,QAAQ,CAAC,wBAAwB,CAAC,CACtC,CACJ,CAAE,MAAO4B,GAAG,CAAE,CACVjB,OAAO,CAACZ,KAAK,CAAC,4BAA4B,CAAE6B,GAAG,CAAC,CAChD5B,QAAQ,CAAC,2BAA2B,CAAC,CACzC,CAAC,OAAS,CACNE,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAEDwB,cAAc,CAAC,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA7C,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAgD,SAAS,CAAGC,WAAW,CAAC,IAAM,CAChC1B,QAAQ,CAAE2B,SAAS,EAAK,CACpB,GAAIA,SAAS,EAAI,CAAC,CAAE,CAChBC,aAAa,CAACH,SAAS,CAAC,CACxBnB,iBAAiB,CAAC,CAAC,CAAE;AACrB,MAAO,EAAC,CAAE;AACd,CACA,MAAO,CAAAqB,SAAS,CAAG,CAAC,CAAE;AAC1B,CAAC,CAAC,CACN,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMC,aAAa,CAACH,SAAS,CAAC,CACzC,CAAC,CAAE,CAACnB,iBAAiB,CAAC,CAAC,CAEvB;AACA7B,SAAS,CAAC,IAAM,CACZ,GAAI0C,cAAc,CAACU,OAAO,CAAC,aAAa,CAAC,CAAE,CACvCtB,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CACnDJ,YAAY,CAAC,IAAI,CAAC,CAAG;AACrBE,iBAAiB,CAAC,CAAC,CAAG;AAC1B,CAAC,IAAM,CACHC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClDW,cAAc,CAACW,OAAO,CAAC,aAAa,CAAE,MAAM,CAAC,CAAG;AACpD,CAEA,MAAO,IAAM,CACTX,cAAc,CAACC,UAAU,CAAC,aAAa,CAAC,CAAE;AAC9C,CAAC,CACL,CAAC,CAAE,CAACd,iBAAiB,CAAC,CAAC,CAEvB;AACA,KAAM,CAAAyB,kBAAkB,CAAGA,CAACC,UAAU,CAAEC,MAAM,GAAK,CAC/CvC,cAAc,CAAEwC,WAAW,GAAM,CAC7B,GAAGA,WAAW,CACd,CAACF,UAAU,EAAGpB,QAAQ,CAACqB,MAAM,CAAE,EAAE,CAAG;AACxC,CAAC,CAAC,CAAC,CACP,CAAC,CAED;AACA,KAAM,CAAAE,gBAAgB,CAAGA,CAAA,GAAM,CAC3BzC,cAAc,CAAC,CAAC,CAAC,CAAC,CAClBQ,QAAQ,CAAC,IAAI,CAAC,CACdF,QAAQ,CAAC,GAAG,CAAC,CACbI,YAAY,CAAC,KAAK,CAAC,CACnBe,cAAc,CAACW,OAAO,CAAC,aAAa,CAAE,MAAM,CAAC,CAAG;AAChDhC,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,KAAM,CAAAwB,cAAc,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA1C,YAAY,CAAC,CAAC,CACrC,GAAI0C,QAAQ,EAAIA,QAAQ,CAAChC,SAAS,EAAIgC,QAAQ,CAAChC,SAAS,CAACwB,MAAM,CAAG,CAAC,CAAE,CACjEvB,YAAY,CAAC+B,QAAQ,CAAChC,SAAS,CAAC,CACpC,CAAC,IAAM,CACHK,QAAQ,CAAC,wBAAwB,CAAC,CACtC,CACJ,CAAE,MAAO4B,GAAG,CAAE,CACVjB,OAAO,CAACZ,KAAK,CAAC,4BAA4B,CAAE6B,GAAG,CAAC,CAChD5B,QAAQ,CAAC,2BAA2B,CAAC,CACzC,CAAC,OAAS,CACNE,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAEDwB,cAAc,CAAC,CAAC,CACpB,CAAC,CAED;AACA,GAAIzB,OAAO,CAAE,CACT,mBAAOX,IAAA,QAAAkD,QAAA,CAAK,sBAAoB,CAAK,CAAC,CAC1C,CAEA;AACA,GAAIzC,KAAK,CAAE,CACP,mBAAOT,IAAA,QAAAkD,QAAA,CAAMzC,KAAK,CAAM,CAAC,CAC7B,CAEA;AACA,GAAIQ,SAAS,CAAE,CACX,mBACIf,KAAA,QAAAgD,QAAA,eACIlD,IAAA,OAAAkD,QAAA,CAAI,sBAAoB,CAAI,CAAC,CAC5BnC,KAAK,GAAK,IAAI,eAAIb,KAAA,OAAAgD,QAAA,EAAI,cAAY,CAACnC,KAAK,EAAK,CAAC,cAC/Cf,IAAA,WAAQmD,OAAO,CAAEF,gBAAiB,CAAAC,QAAA,CAAC,aAAW,CAAQ,CAAC,EACtD,CAAC,CAEd,CAEA;AACA,mBACAlD,IAAA,QAAKoD,SAAS,CAAC,WAAW,CAAAF,QAAA,cACtBhD,KAAA,QAAKkD,SAAS,CAAC,gBAAgB,CAAAF,QAAA,eAC3BhD,KAAA,OAAAgD,QAAA,EAAI,aAAW,CAACG,IAAI,CAACC,KAAK,CAACzC,KAAK,CAAG,EAAE,CAAC,CAAC,GAAC,CAAC0C,MAAM,CAAC1C,KAAK,CAAG,EAAE,CAAC,CAAC2C,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAK,CAAC,cAClFtD,KAAA,QAAKkD,SAAS,CAAC,oBAAoB,CAAAF,QAAA,EAClC7C,SAAS,CAACoD,GAAG,CAAC,CAAChC,QAAQ,CAAEiC,KAAK,gBAC3BxD,KAAA,QAAAgD,QAAA,eACIlD,IAAA,OAAAkD,QAAA,CAAKzB,QAAQ,CAACkC,IAAI,CAAK,CAAC,cACxBzD,KAAA,QAAAgD,QAAA,eACIlD,IAAA,UACI4D,IAAI,CAAC,OAAO,CACZC,IAAI,CAAE,WAAWH,KAAK,EAAG,CACzBI,KAAK,CAAC,GAAG,CACTC,QAAQ,CAAEA,CAAA,GAAMlB,kBAAkB,CAACpB,QAAQ,CAACE,EAAE,CAAE,GAAG,CAAE,CACxD,CAAC,IAAC,CAACF,QAAQ,CAACuC,OAAO,cAAChE,IAAA,QAAK,CAAC,cAC3BA,IAAA,UACI4D,IAAI,CAAC,OAAO,CACZC,IAAI,CAAE,WAAWH,KAAK,EAAG,CACzBI,KAAK,CAAC,GAAG,CACTC,QAAQ,CAAEA,CAAA,GAAMlB,kBAAkB,CAACpB,QAAQ,CAACE,EAAE,CAAE,GAAG,CAAE,CACxD,CAAC,IAAC,CAACF,QAAQ,CAACwC,OAAO,cAACjE,IAAA,QAAK,CAAC,cAC3BA,IAAA,UACI4D,IAAI,CAAC,OAAO,CACZC,IAAI,CAAE,WAAWH,KAAK,EAAG,CACzBI,KAAK,CAAC,GAAG,CACTC,QAAQ,CAAEA,CAAA,GAAMlB,kBAAkB,CAACpB,QAAQ,CAACE,EAAE,CAAE,GAAG,CAAE,CACxD,CAAC,IAAC,CAACF,QAAQ,CAACyC,OAAO,cAAClE,IAAA,QAAK,CAAC,cAC3BA,IAAA,UACI4D,IAAI,CAAC,OAAO,CACZC,IAAI,CAAE,WAAWH,KAAK,EAAG,CACzBI,KAAK,CAAC,GAAG,CACTC,QAAQ,CAAEA,CAAA,GAAMlB,kBAAkB,CAACpB,QAAQ,CAACE,EAAE,CAAE,GAAG,CAAE,CACxD,CAAC,IAAC,CAACF,QAAQ,CAAC0C,OAAO,cAACnE,IAAA,QAAK,CAAC,EAC1B,CAAC,GA3BAyB,QAAQ,CAACE,EA4Bd,CACR,CAAC,cACF3B,IAAA,WAAQmD,OAAO,CAAE/B,iBAAkB,CAAA8B,QAAA,CAAC,aAAW,CAAQ,CAAC,EACvD,CAAC,EACL,CAAC,CACL,CAAC,CAEN,CAAC,CAED,cAAe,CAAA/C,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}